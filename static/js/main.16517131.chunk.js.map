{"version":3,"sources":["Quote.js","helper.js","App.js","serviceWorker.js","index.js"],"names":["Quote","quoteQuote","this","props","quoteAuthor","react_default","a","createElement","class","Component","rng","max","Math","floor","random","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","quotes","randomColor","concat","getQuote","bind","assertThisInitialized","setState","db","_this$state","error","color","backgroundColor","message","style","src_Quote","quote","author","xmlns","width","height","viewBox","d","fill-rule","clip-rule","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQAiBeA,0LAZX,IAAMC,EAAaC,KAAKC,MAAMF,WACxBG,EAAcF,KAAKC,MAAMC,YAC7B,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGC,MAAM,aAAYH,EAAAC,EAAAC,cAAA,KAAGC,MAAM,qBAAuBH,EAAAC,EAAAC,cAAA,QAAMC,MAAM,gBAAgBP,IACjFI,EAAAC,EAAAC,cAAA,KAAGC,MAAM,8BAA8BJ,WAT7BK,cCGLC,EAJL,SAAsBC,GAC5B,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,YC+DlCI,cAzDb,SAAAA,EAAYZ,GAAO,IAAAa,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAf,KAAAa,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAf,KAAAe,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAnB,KAAMC,KACDmB,MAAQ,CACXC,OAAQ,GACRC,YAAW,OAAAC,OAASf,EAAI,KAAb,gBAEbM,EAAKU,SAAWV,EAAKU,SAASC,KAAdV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KANCA,mFAUjBd,KAAKwB,8CAILxB,KAAK2B,SAAS,CACZN,OAAQO,EAAGP,OAAOb,EAAI,MACtBc,YAAW,OAAAC,OAASf,EAAI,KAAb,kDAIN,IAAAqB,EACmB7B,KAAKoB,MAAvBU,EADDD,EACCC,MAAOT,EADRQ,EACQR,OACTG,EAAWxB,KAAKwB,SAChBO,EAAQ,CACZC,gBAAiBhC,KAAKoB,MAAME,aAE9B,OAAIQ,EACK3B,EAAAC,EAAAC,cAAA,qBAAayB,EAAMG,SAGxB9B,EAAAC,EAAAC,cAAA,OAAKC,MAAM,YAAY4B,MAAOH,GAC5B5B,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC8B,EAAD,CAAOpC,WAAYsB,EAAOe,MAAOlC,YAAamB,EAAOgB,SACrDlC,EAAAC,EAAAC,cAAA,OAAKC,MAAM,oBACTH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,2BACTH,EAAAC,EAAAC,cAAA,UAAQC,MAAM,uBAAuB4B,MAAOH,GAC1C5B,EAAAC,EAAAC,cAAA,OAAKiC,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,aACrEtC,EAAAC,EAAAC,cAAA,QAAMqC,EAAE,igBAEZvC,EAAAC,EAAAC,cAAA,UAAQC,MAAM,uBAAuB4B,MAAOH,GAC1C5B,EAAAC,EAAAC,cAAA,OAAKiC,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KACxDC,QAAQ,aACRtC,EAAAC,EAAAC,cAAA,QAAMqC,EAAE,05BACNC,YAAU,UAAUC,YAAU,eAGtCzC,EAAAC,EAAAC,cAAA,UAAQC,MAAM,sCAAsC4B,MAAOH,EAAOc,QAASrB,GAA3E,wBAhDEjB,aCMEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.16517131.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass Quote extends Component {\r\n     \r\n\r\n  render() {\r\n    const quoteQuote = this.props.quoteQuote;\r\n    const quoteAuthor = this.props.quoteAuthor;\r\n      return (\r\n        <div>\r\n          <p class=\"quoteText\"><i class=\"fa fa-quote-left\"></i><span class=\"js-quoteText\">{quoteQuote}</span></p>\r\n          <p class=\"quoteAuthor js-quoteAuthor\">{quoteAuthor}</p>\r\n        </div>\r\n      );\r\n    \r\n  }\r\n}\r\n\r\nexport default Quote;","let rng = function getRandomInt(max) {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n};\r\n\r\nexport default rng;","import React, { Component } from 'react';\nimport './App.css';\nimport Quote from './Quote';\nimport rng from './helper.js';\nimport db from './db.json';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quotes: [],\n      randomColor: `hsl(${rng(360)}, 70%, 70%)`\n    };\n    this.getQuote = this.getQuote.bind(this);\n  }\n\n  componentDidMount() {\n    this.getQuote();\n  }\n\n  getQuote() {\n    this.setState({\n      quotes: db.quotes[rng(101)],\n      randomColor: `hsl(${rng(360)}, 70%, 70%)`\n    })\n  }\n\n  render() {\n    const { error, quotes } = this.state;\n    const getQuote = this.getQuote;\n    const color = {\n      backgroundColor: this.state.randomColor\n    }\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else {\n      return (\n        <div class=\"container\" style={color}>\n          <main>\n            <div>\n              <Quote quoteQuote={quotes.quote} quoteAuthor={quotes.author} />\n              <div class=\"button-container\">\n                <div class=\"social-button-container\">\n                  <button class=\"button button-social\" style={color}>\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n                      <path d=\"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z\" /></svg>\n                  </button>\n                  <button class=\"button button-social\" style={color}>\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\"\n                      viewBox=\"0 0 24 24\">\n                      <path d=\"M19.512 17.489l-.096-.068h-3.274c-.153 0-.16-.467-.163-.622v-5.714c0-.056.045-.101.101-.101h3.82c.056 0 .101-.045.101-.101v-5.766c0-.055-.045-.1-.101-.1h-3.803c-.055 0-.1-.045-.1-.101v-4.816c0-.055-.045-.1-.101-.1h-7.15c-.489 0-1.053.362-1.135 1.034-.341 2.778-1.882 4.125-4.276 4.925l-.267.089-.068.096v4.74c0 .056.045.101.1.101h2.9v6.156c0 4.66 3.04 6.859 9.008 6.859 2.401 0 5.048-.855 5.835-1.891l.157-.208-1.488-4.412zm.339 4.258c-.75.721-2.554 1.256-4.028 1.281l-.165.001c-4.849 0-5.682-3.701-5.682-5.889v-7.039c0-.056-.045-.101-.1-.101h-2.782c-.056 0-.101-.045-.101-.101l-.024-3.06.064-.092c2.506-.976 3.905-2.595 4.273-5.593.021-.167.158-.171.159-.171h3.447c.055 0 .101.045.101.101v4.816c0 .056.045.101.1.101h3.803c.056 0 .101.045.101.1v3.801c0 .056-.045.101-.101.101h-3.819c-.056 0-.097.045-.097.101v6.705c.023 1.438.715 2.167 2.065 2.167.544 0 1.116-.126 1.685-.344.053-.021.111.007.13.061l.995 2.95-.024.104z\"\n                        fill-rule=\"evenodd\" clip-rule=\"evenodd\" /></svg>\n                  </button>\n                </div>\n                <button class=\"button button-quote js-button-quote\" style={color} onClick={getQuote}>New Quote</button>\n              </div>\n            </div>\n          </main>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}